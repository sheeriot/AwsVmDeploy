#cloud-config
# figure out the hostname monkey business
#https://cloudinit.readthedocs.io/en/latest/topics/modules.html#set-hostname
# preserve_hostname: true
hostname: ${hostname}
# fqdn: ${hostname}.example.local
# prefer_fqdn_over_hostname: true

disable_root: true

groups:
  - devops
  - docker

users:
  - name: ${username}
    groups: [sudo, adm, docker]
    ssh_authorized_keys:
      - ${pubkey1}
      - ${pubkey2}
    shell: /bin/bash
    sudo: ALL=(ALL) NOPASSWD:ALL
  - name: catfish
    groups: [sudo, adm, docker]
    ssh_authorized_keys:
      - ${pubkey1}
      - ${pubkey2}
    shell: /bin/bash
    sudo: ALL=(ALL) NOPASSWD:ALL

apt:
  sources:
    docker:
      source: deb [arch=amd64] https://download.docker.com/linux/ubuntu $RELEASE stable
      keyid: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
    postgres:
      source: deb [arch=amd64] http://apt.postgresql.org/pub/repos/apt $RELEASE-pgdg main
      keyid: B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8

# Install Packages
package_update: true
package_upgrade: true

packages:
  - awscli
  - jq
  - net-tools
  - docker-ce
  - docker-ce-cli
  - postgresql-client-13

# Reboot after packages
package_reboot_if_required: true

# run commands starting with PyEnv installer from the web (localize this for version control)
runcmd:
  - [ echo, $(date), ": Cloud-Init: Begin Run Commands" ]
  - [ runuser, -l, "devops", -c, 'mkdir ~/Projects' ]
  - [ runuser, -l, "devops", -c, 'ssh-keygen -t ed25519 -N "" -f ~/.ssh/id_ed25519' ]  
  - [ runuser, -l, ${username}, -c, 'mkdir ~/Projects' ]
  - [ runuser, -l, ${username}, -c, 'ssh-keygen -t ed25519 -N "" -f ~/.ssh/id_ed25519' ]
  # - [ runuser, -l, ${username}, -c, 'aws configure set region us-east-1 --profile default' ]
  # - [ runuser, -l, ${username}, -c, 'aws configure set output json --profile default' ]
  # - [ runuser, -l, ${username}, -c, 'aws configure set cli-history enabled --profile default' ]
  # - [ runuser, -l, ${username}, -c, 'aws configure set region us-east-1 --profile dev' ]
  # - [ runuser, -l, ${username}, -c, 'aws configure set region us-east-2 --profile qa' ]
  # - [ runuser, -l, ${username}, -c, 'aws configure set region us-east-1 --profile commercial' ]
  # - [ runuser, -l, ${username}, -c, 'aws configure set region us-gov-east-1 --profile govcloud' ]
  # - [ echo, "Cloud-Init: Run: Install NVM" ]
  # - [ runuser, -l, ${username}, -c, 'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh | bash' ]
  # - [ runuser, -l, ${username}, -c, 'nvm install --lts' ]
  # - [ runuser, -l, ${username}, -c, 'nvm use --lts' ]
  # - [ echo, "Cloud-Init: npm install yarn" ]
  # - [ npm, install, --global, yarn ]
  # - [ runuser, -l, ${username}, -c, 'echo "export NODE_OPTIONS=--openssl-legacy-provider" >> ~/.profile' ]
  # - [ echo, $(date), " : Cloud-Init: Install PyEnv As User" ]
  # - [ runuser, -l, ${username}, -c, 'curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash' ]
  # - [ echo, $(date), ": Cloud-Init: Install Local Python with PyEnv" ]  
  # - [ runuser, -l, ${username}, -c, '~/.pyenv/bin/pyenv install 3.8.9' ]
  # - [ runuser, -l, ${username}, -c, '~/.pyenv/bin/pyenv global 3.8.9' ]
  # - [ runuser, -l, ${username}, -c, '~/.pyenv/bin/pyenv install 3.9.12' ]
  # - [ runuser, -l, ${username}, -c, '~/.pyenv/bin/pyenv local 3.9.12' ]
  # - [ echo, $(date), " : Cloud-Init: Install PipENV" ]
  # - [ runuser, -l, ${username}, -c, 'pip install pipenv' ]
  # - [ echo, $(date), " : Cloud-Init: Setup .profile for pyenv" ]
  # - [ runuser, -l, ${username}, -c, 'echo "export PYENV_ROOT=\"$HOME/.pyenv\"" >> ~/.profile' ]
  # - [ runuser, -l, ${username}, -c, 'echo "export PATH=\"\$PYENV_ROOT/bin:\$PATH\"" >> ~/.profile' ]
  # - [ runuser, -l, ${username}, -c, 'echo "eval \"\$(pyenv init -)\"" >> ~/.profile' ]
  # - [ runuser, -l, ${username}, -c, 'echo "export NODE_OPTIONS=--openssl-legacy-provider" >> ~/.profile' ]  

power_state:
    delay: now
    mode: reboot
    message: rebooting
    timeout: 2
    condition: true